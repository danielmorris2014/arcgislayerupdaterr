Prompt for Replit AI
"Update the ArcGISLayerUpdater Streamlit app to fix the persistent error 'Error creating layer: 'dict' object has no attribute 'to_csv'' that occurs when uploading a shapefile zip (e.g., 'MST_BURIED.zip') to create a new layer in ArcGIS Online. The error happens because the app tries to call to_csv on a dictionary instead of a pandas DataFrame, likely due to improper handling of shapefile data and its geometry.
Goal: Ensure the data is always a pandas DataFrame before creating the layer, handle geometry data by converting it to WKT format, and add robust error checking and logging to prevent this error.
Steps to Implement:

Extract and Validate the Zip File:

Extract the uploaded .zip to a temporary directory (e.g., 'temp_shapefile').
Verify the presence of .shp, .shx, and .dbf files. If any are missing, show an error with st.error.


Read and Validate the Shapefile:

Load the shapefile using geopandas.read_file() from the .shp file.
Check if the result is a GeoDataFrame with isinstance(gdf, gpd.GeoDataFrame). If not, raise an error.
Ensure the GeoDataFrame isnâ€™t empty (gdf.empty). If it is, show an error.


Convert Geometry to WKT:

Add a 'wkt_geometry' column with the geometry in WKT format using gdf['geometry'].apply(lambda geom: geom.wkt if geom else None).
Drop the original geometry column to get a standard DataFrame: df = gdf.drop(columns='geometry').


Verify the DataFrame:

Confirm df is a pandas DataFrame with isinstance(df, pd.DataFrame). If not, raise a TypeError.


Create the ArcGIS Layer:

Use gis.content.import_data() to create the layer directly from the DataFrame, avoiding manual CSV creation.
If import_data() fails, export the DataFrame to a CSV as a fallback.


Add Logging and Debug Mode:

Log key steps (e.g., 'Extracted shapefile', 'Loaded GeoDataFrame') to a file like 'app_log.txt'.
Add a st.checkbox("Enable Debug Mode") to show intermediate data and logs in the app.


Clean Up:

Delete the temporary directory and files in a finally block.



Sample Code:
import streamlit as st
import geopandas as gpd
import pandas as pd
from arcgis.gis import GIS
import zipfile
import os
import logging
import shutil

# Set up logging
logging.basicConfig(filename='app_log.txt', level=logging.INFO, format='%(asctime)s - %(message)s')

st.title("ArcGIS Layer Updater")
uploaded_file = st.file_uploader("Upload a shapefile ZIP", type="zip")
debug_mode = st.checkbox("Enable Debug Mode")

if uploaded_file:
    try:
        # Extract zip
        temp_dir = "temp_shapefile"
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        os.makedirs(temp_dir)
        with zipfile.ZipFile(uploaded_file, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)
        logging.info("Extracted zip file")
        if debug_mode:
            st.write("Extracted files:", os.listdir(temp_dir))

        # Find .shp file
        shp_file = next((f for f in os.listdir(temp_dir) if f.endswith('.shp')), None)
        if not shp_file:
            raise FileNotFoundError("No .shp file found")
        shp_path = os.path.join(temp_dir, shp_file)
        logging.info(f"Found shapefile: {shp_file}")

        # Load GeoDataFrame
        gdf = gpd.read_file(shp_path)
        if not isinstance(gdf, gpd.GeoDataFrame):
            raise TypeError("Not a GeoDataFrame")
        if gdf.empty:
            raise ValueError("Shapefile is empty")
        logging.info("Loaded GeoDataFrame")
        if debug_mode:
            st.write("GeoDataFrame preview:", gdf.head())

        # Convert to WKT
        gdf['wkt_geometry'] = gdf['geometry'].apply(lambda geom: geom.wkt if geom else None)
        df = gdf.drop(columns=['geometry'])
        logging.info("Converted geometry to WKT")
        if debug_mode:
            st.write("DataFrame:", df.head())

        # Verify DataFrame
        if not isinstance(df, pd.DataFrame):
            raise TypeError(f"Expected DataFrame, got {type(df)}")
        logging.info("Verified DataFrame")

        # Create layer
        gis = GIS("https://www.arcgis.com", "your_username", "your_password")  # Replace credentials
        layer_title = f"New_Layer_{uploaded_file.name.split('.')[0]}"
        feature_layer = gis.content.import_data(df, title=layer_title)
        logging.info("Layer created")
        st.success(f"Layer created! Access it: {gis.url}/home/item.html?id={feature_layer.id}")

    except Exception as e:
        st.error(f"Error: {str(e)}")
        logging.error(f"Error: {str(e)}")
        if debug_mode:
            st.write("Details:", str(e))

    finally:
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            logging.info("Cleaned up")

Testing:

Replace 'your_username' and 'your_password' with your ArcGIS credentials.
Test with MST_BURIED.zip, enable debug mode, and check 'app_log.txt' if issues persist.

Expected Outcome:

The app processes the shapefile, converts geometry to WKT, and creates the layer without the error."
